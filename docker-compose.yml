version: '3.9'

services:
  force-clone:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./data/optimism:/app/data/optimism
      - ./data/op-geth:/app/data/op-geth
      - ./data/deployments:/app/data/deployments
      - ./data/configurations:/app/data/configurations
      - ./data/bin:/app/data/bin
      - ./data/datadir:/app/data/datadir
    env_file:
      - .env
      - paths.env

  celestia-da:
    user: root
    build:
      context: .
      dockerfile: Dockerfile.celestia
    # TODO: need to use a variable for volume path
    volumes:
      - ./entrypoints/celestia-da.sh:/celestia-da.sh
      - ./data/celestia:/home/celestia/.celestia-light-mocha-4/
    command: ["/bin/bash", "-c", "chmod +x /celestia-da.sh && /celestia-da.sh"]
    env_file:
      - .env
      - celestia.env
    environment:
      - NODE_TYPE=light
      - P2P_NETWORK=${DA_P2P_NETWORK}
    ports:
      - "26650:26650"
    depends_on:
      force-clone:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "\
        authToken=$$(celestia-da light auth admin --p2p.network $$DA_P2P_NETWORK) && \
        catch_up_done=$$(curl -s -X POST -H 'Content-Type: application/json' -H \"Authorization: Bearer $$authToken\" --data '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\":\"das.SamplingStats\", \"params\":[]}' http://localhost:26658 | jq -r '.result.catch_up_done') && \
        [ \"$$catch_up_done\" = \"true\" ]"]
      interval: 2m
      timeout: 10s
      retries: 60
      start_period: 1m
    restart: always
    profiles: ["celestia"]

  op-geth:
    build:
      context: .
      dockerfile: Dockerfile.services
      args:
        ENTRYPOINT_SCRIPT: op-geth.sh
    volumes:
      - ./data/bin:/app/data/bin
      - ./data/datadir:/app/data/datadir
      - ./data/configurations:/app/data/configurations
    depends_on:
      force-clone:
        condition: service_completed_successfully
      celestia-da:
        condition: service_healthy
    env_file:
      - .env
      - paths.env
      - opgeth.env
    ports:
      - "8545:8545"
      - "8551:8551"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  op-node:
    build:
      context: .
      dockerfile: Dockerfile.services
      args:
        ENTRYPOINT_SCRIPT: op-node.sh
    volumes:
      - ./data/bin:/app/data/bin
      - ./data/configurations:/app/data/configurations
    depends_on:
      op-geth:
        condition: service_healthy
    env_file:
      - .env
      - paths.env
      - opnode.env
    ports:
      - "8547:8547"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8547 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  op-batcher:
    build:
      context: .
      dockerfile: Dockerfile.services
      args:
        ENTRYPOINT_SCRIPT: op-batcher.sh
    volumes:
      - ./data/bin:/app/data/bin
    depends_on:
      op-geth:
        condition: service_healthy
      op-node:
        condition: service_healthy
    env_file:
      - .env
      - paths.env
      - opbatcher.env
    ports:
      - "8548:8548"
    restart: unless-stopped

  op-proposer:
    build:
      context: .
      dockerfile: Dockerfile.services
      args:
        ENTRYPOINT_SCRIPT: op-proposer.sh
    volumes:
      - ./data/bin:/app/data/bin
      - ./data/deployments:/app/data/deployments
    depends_on:
      op-geth:
        condition: service_healthy
      op-node:
        condition: service_healthy
    env_file:
      - .env
      - paths.env
      - opproposer.env
    ports:
      - "8560:8560"
    restart: unless-stopped
